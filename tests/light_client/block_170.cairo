// THIS FILE IS GENERATED BY A SCRIPT, DO NOT EDIT IT MANUALLY!

use raito::types::chain_state::{ChainState, BlockValidator};
use raito::types::block::{Block, Header, TransactionData};

/// Chain state at the beginning of the test
fn chain_state_169() -> ChainState {
    ChainState {
        block_height: 169,
        total_work: 730155581610_u256,
        best_block_hash: 0x000000002a22cfee1f2c846adbd12b3e183d4f97683f85dad08a79780a84bd55_u256
            .into(),
        current_target: 26959535291011309493156476344723991336010898738574164086137773096960,
        epoch_start_time: 1231006505,
        prev_timestamps: [
            1231702618,
            1231703466,
            1231704197,
            1231704464,
            1231714917,
            1231715347,
            1231716245,
            1231716329,
            1231716711,
            1231717181,
            1231730523
        ].span(),
    }
}

/// Block that is being validated and applied
fn block_170() -> Block {
    Block {
        header: Header {
            version: 1_u32, time: 1231731025_u32, bits: 486604799_u32, nonce: 1889418792_u32,
        },
        data: TransactionData::MerkleRoot(
            0x7dac2c5666815c17a3b36427de37bb9d2e2c5ccec3f8633eb91a4205cb4c10ff_u256.into()
        ),
    }
}

/// Expected chain state at the end of the test
fn chain_state_170() -> ChainState {
    ChainState {
        block_height: 170,
        total_work: 734450614443_u256,
        best_block_hash: 0x00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee_u256
            .into(),
        current_target: 26959535291011309493156476344723991336010898738574164086137773096960,
        epoch_start_time: 1231006505,
        prev_timestamps: [
            1231703466,
            1231704197,
            1231704464,
            1231714917,
            1231715347,
            1231716245,
            1231716329,
            1231716711,
            1231717181,
            1231730523,
            1231731025,
        ].span(),
    }
}

#[test]
fn test_block_header_170() {
    let chain_state = chain_state_169();
    let block = block_170();
    let new_chain_state = chain_state.validate_and_apply(block).unwrap();
    let expected = chain_state_170();
    assert_eq!(expected, new_chain_state);
}
